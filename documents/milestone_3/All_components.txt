List of all important components and sub-components as per user:

===============================================================================
Auth Components
===============================================================================
- Login page (html template + vue setup + bootstrap styling) (User can login using through email id and password)
- Register page (html template + vue setup + bootstrap styling) (User need to fill in first and last name + unique email id + password + profile_photo (optional))
- Frontend and Backend data validation for login/register (including validation of punctuations or any other symbol that can breach the security)
- Frontend store JWT and delete when expired (securing sofware with JWT)
- Backend Create JWT and verify for each request (Creating and verifying new and old requests)
- AuthAPI to handle login/register/logout (authenticated APIs to handle login + register + logout)
- Validate new users registrations (sending information to the admin to accept the new user)
- Methods to send notifications (google chat webhook, email) (Once admin accept or decline the new user, sending notification about their status)

===============================================================================
Ticket Components
===============================================================================
- CRUD operations with Ticket API (Authenticated APIs for CRUD on Tickets)
- Multiple tickets request with API (Authenticated APIs for GET requests)
- Set up Cache for ticket request (Caching for data retrieval efficiency)
- Create Ticket page (html template + vue setup + bootstrap styling) (User need to add title + description + priority + tags + add attachment which is optional)
- My tickets page (html template + vue setup + bootstrap styling) (User can view all tickets or can use filters)

===============================================================================
Student Components
===============================================================================
- Home page (html template + vue setup + bootstrap styling) (User can view unsolved tickets and their activity on the software)
- Update profile page (html template + vue setup + bootstrap styling) (User can change their details except email)
- Search, sort , filter tickets for frontend (User can search, sort, filter to see specific tickets)
- Student API backend (Fetching Data and CRUD operations are implemented using authenticated APIs)

===============================================================================
Support Staff Components
===============================================================================
- Home page (html template + vue setup + bootstrap styling) (User can see all the unresolved tickets and their activity + can sort and filter)
- My resolved tickets page (html template + vue setup + bootstrap styling) (User can see all the tickets that they have solved)
- Resolve Ticket page (html template + vue setup + bootstrap styling) (User need to add solution + attachment, if required and solve the ticket)
- Update profile and change password page (User can change their details except email)
- Backend API for support staff (Fetching Data and CRUD operations are implemented using authenticated APIs)

===============================================================================
Admin Components
===============================================================================
- Home page (User can see details of all the students, tickets, support staff and admins)
- Validate users page (User can accept or decline the request of new studnet or suppport staff)
- View most upvoted tickets (User can see most upvoted tickets and create FAQ)
- Update profile and change password page (User can change their details except email)
- Admin api for backend (Fetching Data and CRUD operations are implemented using authenticated APIs)

===============================================================================
FAQ Components
===============================================================================
- View all FAQ page (html template + vue setup + bootstrap styling) (See all the FAQs till now)
- Create FAQ page (html template + vue setup + bootstrap styling) (Create FAQs for the most upvoted tickets)
- FAQ API for backend (Fetching Data and CRUD operations are implemented using authenticated APIs)